# name: Pulumi CI/CD Pipeline

# on:
#   push:
#     branches:
#       - 'main'
#     paths:
#       - 'pulumi/user-service-pulumi/**'
#   pull_request:
#     branches:
#       - main
#     paths:
#       - 'pulumi/user-service-pulumi/**'

# permissions:
#   contents: read
#   id-token: write
#   packages: write

# env:
#   PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
#   AWS_DEFAULT_REGION: us-east-1
#   AWS_REGION: us-east-1
#   TMS_BUCKET_NAME: ${{ vars.TMS_BUCKET_NAME }}
#   USER_SERVICE_LAMBDA_FUNCTION_NAME: ${{ vars.USER_SERVICE_LAMBDA_FUNCTION_NAME }}

# jobs:
#   pulumi-plan:
#     name: Pulumi Plan
#     runs-on: ubuntu-latest
#     env:
#       PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
#       AWS_DEFAULT_REGION: us-east-1
#       AWS_REGION: us-east-1
#       TMS_BUCKET_NAME: ${{ vars.TMS_BUCKET_NAME }}
#       USER_SERVICE_LAMBDA_FUNCTION_NAME: ${{ vars.USER_SERVICE_LAMBDA_FUNCTION_NAME }}
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Set up Pulumi CLI
#         run: |
#           curl -fsSL https://get.pulumi.com | sh
#           export PATH=$HOME/.pulumi/bin:$PATH

#       - name: Configure AWS credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#           aws-region: us-east-1
#           audience: sts.amazonaws.com

#       - name: Set up Pulumi Access Token
#         run: echo "PULUMI_ACCESS_TOKEN=${{ secrets.PULUMI_PAT }}" >> $GITHUB_ENV

#       - name: Install dependencies
#         run: |
#           cd pulumi/user-service-pulumi
#           npm install  

#       - name: Pulumi Stack Init
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi stack init ${GITHUB_REF#refs/heads/} || pulumi stack select ${GITHUB_REF#refs/heads/}

#       - name: Set Pulumi Configs from Environment Variables
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi config set lambdaBucket "$TMS_BUCKET_NAME" --stack ${GITHUB_REF#refs/heads/}
#           pulumi config set lambdaFunctionName "$USER_SERVICE_LAMBDA_FUNCTION_NAME" --stack ${GITHUB_REF#refs/heads/}
#           pulumi config set lambdaKey "$USER_SERVICE_LAMBDA_FUNCTION_NAME" --stack ${GITHUB_REF#refs/heads/}

#       - name: Pulumi Preview (Dry Run)
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi preview --stack ${GITHUB_REF#refs/heads/}

#   pulumi-apply:
#     name: Pulumi Apply
#     runs-on: ubuntu-latest
#     needs: pulumi-plan
#     environment:
#       name: pulumi-up
#     env:
#       PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
#       AWS_DEFAULT_REGION: us-east-1
#       AWS_REGION: us-east-1
#       TMS_BUCKET_NAME: ${{ vars.TMS_BUCKET_NAME }}
#       USER_SERVICE_LAMBDA_FUNCTION_NAME: ${{ vars.USER_SERVICE_LAMBDA_FUNCTION_NAME }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Pulumi CLI
#         run: |
#           curl -fsSL https://get.pulumi.com | sh
#           export PATH=$HOME/.pulumi/bin:$PATH

#       - name: Configure AWS credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#           aws-region: us-east-1

#       - name: Set up Pulumi Access Token
#         run: echo "PULUMI_ACCESS_TOKEN=${{ secrets.PULUMI_PAT }}" >> $GITHUB_ENV

#       - name: Install dependencies
#         run: |
#           cd pulumi/user-service-pulumi
#           npm install  

#       - name: Pulumi Stack Select
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi stack select ${GITHUB_REF#refs/heads/}

#       - name: Set Pulumi Configs from Environment Variables
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi config set lambdaBucket "$TMS_BUCKET_NAME" --stack ${GITHUB_REF#refs/heads/}
#           pulumi config set lambdaFunctionName "$USER_SERVICE_LAMBDA_FUNCTION_NAME" --stack ${GITHUB_REF#refs/heads/}
#           pulumi config set lambdaKey "$USER_SERVICE_LAMBDA_FUNCTION_NAME" --stack ${GITHUB_REF#refs/heads/}

#       - name: Run Pulumi Apply in the user-service folder
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi up --yes --stack ${GITHUB_REF#refs/heads/}

#   pulumi-destroy:
#     name: Pulumi Destroy
#     runs-on: ubuntu-latest
#     needs: pulumi-apply
#     environment:
#       name: pulumi-down
#     env:
#       PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
#       AWS_DEFAULT_REGION: us-east-1
#       AWS_REGION: us-east-1
#       TMS_BUCKET_NAME: ${{ vars.TMS_BUCKET_NAME }}
#       USER_SERVICE_LAMBDA_FUNCTION_NAME: ${{ vars.USER_SERVICE_LAMBDA_FUNCTION_NAME }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Pulumi CLI
#         run: |
#           curl -fsSL https://get.pulumi.com | sh
#           export PATH=$HOME/.pulumi/bin:$PATH

#       - name: Configure AWS credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#           aws-region: us-east-1

#       - name: Set up Pulumi Access Token
#         run: echo "PULUMI_ACCESS_TOKEN=${{ secrets.PULUMI_PAT }}" >> $GITHUB_ENV

#       - name: Install dependencies
#         run: |
#           cd pulumi/user-service-pulumi 
#           npm install  

#       - name: Pulumi Stack Select
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi stack select ${GITHUB_REF#refs/heads/}

#       - name: Set Pulumi Configs from Environment Variables
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi config set lambdaBucket "$TMS_BUCKET_NAME" --stack ${GITHUB_REF#refs/heads/}
#           pulumi config set lambdaFunctionName "$USER_SERVICE_LAMBDA_FUNCTION_NAME" --stack ${GITHUB_REF#refs/heads/}
#           pulumi config set lambdaKey "$USER_SERVICE_LAMBDA_FUNCTION_NAME" --stack ${GITHUB_REF#refs/heads/}

#       - name: Run Pulumi Destroy in the user-service folder
#         run: |
#           cd pulumi/user-service-pulumi
#           pulumi destroy --yes --stack ${GITHUB_REF#refs/heads/}